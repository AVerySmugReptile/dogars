"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const settings_1 = require("./settings");
const request = require("request-promise-native");
const tripcode = require("tripcode");
const utils_1 = require("../Website/utils");
const poke_utils_1 = require("../Website/poke-utils");
const Champ_1 = require("./Models/Champ");
const Replay_1 = require("./Models/Replay");
const dexdata_1 = require("../Shoedrip/dexdata");
const url = `mongodb://${settings_1.settings.db.host}:${settings_1.settings.db.port || 27017}`;
const dbName = settings_1.settings.db.database;
let memes;
exports.total = 0;
let connection;
let inited = false;
exports.init = () => __awaiter(this, void 0, void 0, function* () {
    if (inited)
        return;
    connection = yield mongodb_1.MongoClient.connect(url, { useNewUrlParser: true });
    memes = connection.db(dbName);
    let collections = yield memes.collections();
    inited = true;
    exports.ChampsCollection = memes.collection('Champs');
    exports.SetsCollection = memes.collection('Sets');
    exports.ReplaysCollection = memes.collection('Replays');
    exports.total = yield exports.SetsCollection.countDocuments({});
});
const updateElo = (trip, name) => __awaiter(this, void 0, void 0, function* () {
    let b = yield request.get(`https://play.pokemonshowdown.com/~~showdown/action.php?act=ladderget&user=${utils_1.toId(name)}`);
    let stats = JSON.parse(b.substr(1));
    if (stats.length == 0)
        throw "Unregistered or never played";
    let oustat = stats.filter(e => e.formatid == 'gen7ou')[0];
    if (!oustat)
        throw "Never played OU";
    let ouelo = ~~oustat.elo;
    // no need to sync
    exports.ChampsCollection.updateOne({
        trip
    }, {
        $set: {
            elo: ouelo,
            showdown_name: name
        }
    });
});
exports.rebuildChampAvatars = () => __awaiter(this, void 0, void 0, function* () {
    let i = 0;
    let j = 0;
    let target = 10;
    let champs = yield exports.ChampsCollection.find({}).toArray();
    for (let c of champs) {
        ++i;
        if (c.avatar && c.avatar in dexdata_1.BattleAvatarNumbers) {
            ++j;
            if ((i / champs.length) * 100 >= target) {
                target += 10;
                console.log(`${target}%...`);
            }
            c.avatar = dexdata_1.BattleAvatarNumbers[c.avatar];
            yield exports.ChampsCollection.updateOne({
                trip: c.trip
            }, {
                $set: { avatar: c.avatar }
            });
        }
    }
});
exports.registerChampResult = (battleData, hasWon) => __awaiter(this, void 0, void 0, function* () {
    let replayurl;
    if (!inited)
        return;
    try {
        yield updateElo(battleData.champ.trip, battleData.champ.showdown_name);
    }
    catch (e) {
        console.log(e);
    }
    let inc = hasWon ? 'wins' : 'loses';
    let champ = yield exports.ChampsCollection.findOne({ trip: battleData.champ.trip });
    if (!champ) {
        exports.ChampsCollection.insertOne(new Champ_1.Champ(battleData.champ.name, battleData.champ.trip));
    }
    if (battleData.champ.avatar != '166')
        yield exports.ChampsCollection.updateOne({
            trip: battleData.champ.trip
        }, {
            $set: { avatar: battleData.champ.avatar }
        });
    yield exports.ChampsCollection.updateOne({
        trip: battleData.champ.trip
    }, {
        $inc: { [inc]: 1 },
        $set: {
            name: battleData.champ.name,
            last_seen: +new Date
        }
    });
    if (!hasWon)
        return;
    if (!battleData.champ.current_battle)
        return;
    yield poke_utils_1.pokeUtils.saveReplay(battleData.champ.current_battle);
    replayurl = 'http://replay.pokemonshowdown.com/' + battleData.roomid;
    let savedrepl = yield exports.ReplaysCollection.insertOne(new Replay_1.Replay(replayurl, 'Automatically uploaded replay. Champ: ' + battleData.champ.name + ' ' + battleData.champ.trip, battleData.champ.name, battleData.champ.trip, 0));
    let n = 0;
    for (let i = 0; i < battleData.memes.length; ++i) {
        let set = yield exports.SetsCollection.findOne({ name: battleData.memes[i].name });
        if (set) {
            ++n;
            yield exports.ReplaysCollection.update({ _id: savedrepl.insertedId }, { $push: { sets: set } });
        }
    }
});
exports.deleteSet = (id, trip, ignored) => __awaiter(this, void 0, void 0, function* () {
    let row = yield exports.SetsCollection.findOne({ id });
    if (!row)
        throw 'No such set';
    if (trip != settings_1.settings.admin_pass && (!row.hash || !trip))
        throw 'No tripcode associated with this set or no tripcode given';
    if (!(trip == settings_1.settings.admin_pass || row.hash == tripcode(trip)))
        throw 'Wrong tripcode';
    let del = yield exports.SetsCollection.deleteOne({ id });
    exports.total--;
    return null;
});
exports.updateSet = (id, trip, info) => __awaiter(this, void 0, void 0, function* () {
    let uset = yield exports.SetsCollection.findOne({ id });
    if (!uset)
        throw 'No such set';
    if (trip != settings_1.settings.admin_pass && (!uset.hash || !trip))
        throw 'No tripcode associated with this set or no tripcode given';
    if (!(trip == settings_1.settings.admin_pass || uset.hash == tripcode(trip)))
        throw 'Wrong tripcode';
    uset.format = "gen7ou";
    let formats = ["gen7ou", "gen7anythinggoes", "ubers", "uu", "ru",
        "nu", "pu", "lc", "gen8oubeta", "gen8doublesoubeta", "cap"];
    if (formats.includes(info.format))
        uset.format = info.format;
    uset.description = info.desc.substr(0, 650);
    let pok = poke_utils_1.pokeUtils.parseSet(info.set);
    pok.format = uset.format;
    for (let i in pok)
        uset[i] = pok[i];
    uset.date_added = +new Date();
    let errors = yield poke_utils_1.pokeUtils.checkSet(pok);
    if (errors) {
        throw errors;
    }
    exports.SetsCollection.updateOne({ id }, { $set: uset });
    return null;
});
exports.buildCheckableSet = (set) => {
    let nset = set;
    [1, 2, 3, 4]
        .map(d => 'move_' + d)
        .forEach(mp => nset[mp] = nset[mp] ? nset[mp].split('/')[0].trim() : null);
    return nset;
};
exports.createNewSet = (sdata) => __awaiter(this, void 0, void 0, function* () {
    let nset = {};
    nset.hash = tripcode(sdata.trip);
    nset.format = "gen7ou";
    let formats = ["gen7ou", "gen7anythinggoes", "ubers", "uu", "ru",
        "nu", "pu", "lc", "gen8oubeta", "gen8doublesoubeta", "cap"];
    if (formats.includes(sdata.format))
        nset.format = sdata.format;
    nset.creator = sdata.creat.substr(0, 23);
    nset.description = sdata.desc.substr(0, 650);
    let pok = poke_utils_1.pokeUtils.parseSet(sdata.set);
    pok.format = nset.format;
    let errors = yield poke_utils_1.pokeUtils.checkSet(pok);
    if (errors)
        throw errors;
    for (let i in pok)
        nset[i] = pok[i];
    nset.date_added = +new Date();
    exports.total++;
    nset.id = (yield exports.SetsCollection.find().sort({ id: -1 }).toArray())[0].id + 1;
    yield exports.SetsCollection.insert(nset);
    return nset;
});
exports.getRandomSet = (seed = ~~(Math.random() * exports.total)) => __awaiter(this, void 0, void 0, function* () { return exports.SetsCollection.find().skip(seed % exports.total).limit(1).toArray(); });
//# sourceMappingURL=data:application/json;base64,