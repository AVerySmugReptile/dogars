"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BasicHandler_1 = require("./BasicHandler");
const utils_1 = require("../../Website/utils");
const PSMessage_1 = require("../PSMessage");
const shoedrip_1 = require("../../Shoedrip/shoedrip");
const DogarsClient_1 = require("../../DogarsClient");
const dogars_chan_1 = require("../../dogars-chan");
class EndHandler extends BasicHandler_1.default {
    attached(bm, detach) {
        const _super = Object.create(null, {
            attached: { get: () => super.attached }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.attached.call(this, bm, detach);
            this.bm = bm;
        });
    }
    constructor(ia) {
        super();
        this.ia = ia;
    }
    win(w) {
        const _super = Object.create(null, {
            win: { get: () => super.win }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.win.call(this, w);
            if (this.ia.battleData.dist == 0)
                for (let i = 0; i < 75; ++i) {
                    let data = yield this.account.request(new PSMessage_1.PSUserDetails(this.ia.guessedChamp.showdown_name));
                    if (data.rooms === false) // offline
                        //break;
                        return (0);
                    let rooms = Object.keys(data.rooms)
                        .filter(n => n.includes('â˜†')) // do not follow rooms/spectating
                        .map(n => n.substr(1)) // remove the star
                        .filter(n => n > this.roomname); // newest rooms
                    if (rooms.length >= 1) {
                        this.ia.guessedChamp.current_battle = `https://play.pokemonshowdown.com/${rooms[0]}`;
                        DogarsClient_1.DogarsClient.setbattle(this.ia.guessedChamp.current_battle);
                        this.account.message(this.roomname, this.ia.guessedChamp.current_battle);
                        dogars_chan_1.monitor(this.ia.guessedChamp, this.account);
                        yield utils_1.snooze(1000);
                        break;
                    }
                    yield utils_1.snooze(1000);
                }
            else {
                console.log(`Didn't follow champ because`, this.ia.battleData, shoedrip_1.champ);
            }
            this.account.tryLeave(this.roomname);
        });
    }
}
exports.default = EndHandler;
//# sourceMappingURL=data:application/json;base64,